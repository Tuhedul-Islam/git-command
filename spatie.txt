Spatie cache clear...............................
php artisan cache:forget spatie.permission.cache
php artisan permission:cache-reset
php artisan cache:clear


//        $role = Role::create(['name' => 'writer']);
//        $permission = Permission::create(['name' => 'create articles']); //edit articles
        $permission = Permission::findById(1);
        $role = Role::findById(1);
        $user = Auth::user();

        //Role-wise set permission & sync & revoke or remove [sync uses to remove previous roles and add new roles of that user]
//        $role->givePermissionTo($permission);
//        $permission->assignRole($role);
//        $role->syncPermissions($permission);
//        $permission->syncRoles($role);
//        $role->revokePermissionTo($permission);
//        $permission->removeRole($role);
        //dd(auth()->user()->hasPermissionTo($permission, 'web'));


        //User-wise set permission & sync & revoke or remove
//        $user->givePermissionTo('create articles'); //set direct permission
//        $user->assignRole($role); //set role wise permission
//        $user->syncPermissions($permission);
//        $user->syncRoles($role);
//        $user->revokePermissionTo($permission);
//        $user->removeRole($role);
//        $role->givePermissionTo($permission);

        //list of all permission of a user
//        $permissionNames = $user->getPermissionNames(); // collection of name strings
//        $permissions = $user->permissions; // collection of permission objects

//        $permissions = $user->getDirectPermissions(); //get all permission
//        $permissions = $user->getPermissionsViaRoles(); //get role wise permission
//        $permissions = $user->getAllPermissions(); //get all permission

        // Returns those writer who belong to 'writer' role
//        $users = User::role('writer')->get();
        // Returns only users with the permission 'edit articles'
//        $users = User::permission('edit articles')->get();


//        $all_users_with_all_their_roles = User::with('roles')->get();
//        $all_users_with_all_direct_permissions = User::with('permissions')->get();
//        $all_roles_in_database = Role::all()->pluck('name');
//        $users_without_any_roles = User::doesntHave('roles')->get();
//        $all_roles_except_a_and_b = Role::whereNotIn('name', ['role A', 'role B'])->get();

        // Direct permissions
//        $getDirectPermissions = $user->getDirectPermissions();

        // Permissions inherited from the user's roles
//        $getPermissionsViaRoles = $user->getPermissionsViaRoles();

        // All permissions which apply on the user
        $getAllPermissions = $user->getAllPermissions();